name := "html"

ThisBuild / organization := "com.concentricsky"

enablePlugins(ScalaJSBundlerPlugin)

enablePlugins(ScalaJSPlugin)

enablePlugins(Example)

import scala.meta._

exampleSuperTypes += ctor"_root_.org.scalatest.Inside"

libraryDependencies += "com.thoughtworks.binding" %%% "binding" % "11.8.1"

libraryDependencies += "com.thoughtworks.binding" %%% "bindable" % "1.1.0"

libraryDependencies += "org.scalatest" %%% "scalatest" % "3.0.8" % Test

addCompilerPlugin("org.scalamacros" % "paradise" % "2.1.1" cross CrossVersion.full)

libraryDependencies += "org.scala-js" %%% "scalajs-dom" % "0.9.7"

dependsOn(RootProject(file("nameBasedXml.scala")))

requireJsDomEnv in Test := true

val generateHtmlBuilders = taskKey[File]("Generate HtmlBuilders.scala file from HTML Living Standard")

generateHtmlBuilders := {
  import com.gargoylesoftware.htmlunit.WebClient
  import com.gargoylesoftware.htmlunit.html._
  import scala.collection.JavaConverters._
  val webClient = new WebClient()
  webClient.getOptions().setJavaScriptEnabled(false)
  webClient.getOptions().setCssEnabled(false)
  val HeadingTag = """h\d""".r
  val document = webClient.getPage[HtmlPage]("https://html.spec.whatwg.org/")
  val tagDefs = document.querySelectorAll("dl.element").asScala.view.flatMap { elementDl =>
    val domInterface = elementDl.querySelectorAll(".idl dfn[id$=element]").asScala match {
      case Seq(domInterfaceDfn) =>
          domInterfaceDfn.asText
      case Seq() =>
        elementDl.querySelectorAll("dd:last-child code").asScala.filter { code =>
          Set("Uses", "Use", "Supplied by the element's author (inherits from").contains(code.getPreviousSibling.asText)
        } match {
          case Seq(code) =>
            code.asText
        }
    }
    val Some(heading) = Iterator.iterate(elementDl)(_.getPreviousElementSibling).find { element =>
      HeadingTag.unapplySeq(element.getLocalName).isDefined
    }
    heading.querySelectorAll("dfn").asScala.view.map { elementDfn =>
      val tagName = elementDfn.asText
      q"""
        @inline def ${Term.Name(tagName)}() = 
          new AttributeBuilder(document.createElement($tagName).asInstanceOf[${Type.Name(domInterface)}])
      """
    }
  }
  val geneatedAst = q"""
  package com.concentricsky {
    import org.scalajs.dom.document
    import org.scalajs.dom.raw._
    import com.concentricsky.html.NodeBinding.Constant.AttributeBuilder
    private[concentricsky] trait HtmlBuilders { this: com.concentricsky.html.autoImports.http$$colon$$div$$divwww$$u002Ew3$$u002Eorg$$div1999$$divxhtml.type =>
      ..${tagDefs.toList}
    }
  }
  """
  val file = (Compile / scalaSource).value / "com" / "concentricsky" / "HtmlBuilders.scala"
  val fileContent = Seq(
    "// Don't edit this file, because it is generated by `sbt generateHtmlBuilders`",
    geneatedAst.syntax
  )
  IO.writeLines(file, fileContent)
  file
}
