// Don't edit this file, because it is generated by `sbt generateAttributeFunctions`
package com.concentricsky
import scala.language.dynamics
import scala.scalajs.js
import org.scalajs.dom.raw._
import com.concentricsky.html.NodeBinding.Interpolated.MountPointBuilder
import com.concentricsky.html.NodeBinding.Interpolated.PropertyFunction
import com.concentricsky.html.NodeBinding.Constant.AttributeFunction
import com.concentricsky.html.elementTypes._
import com.thoughtworks.binding.Binding
private[concentricsky] object AttributeFunctions extends Dynamic {
  @inline def applyDynamic(attributeName: String) = new AttributeFunction(attributeName)
  object BaseHref extends PropertyFunction {
    @inline protected def attributeName = "BaseHref"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, BaseHref.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.BaseHref = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, BaseHref.type, String] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.BaseHref = _)
      }
    }
  }
  object accept extends PropertyFunction {
    @inline protected def attributeName = "accept"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, accept.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.accept = _)
      }
    }
  }
  object acceptCharset extends PropertyFunction {
    @inline protected def attributeName = "acceptCharset"
    implicit object HTMLFormElement extends MountPointBuilder[HTMLFormElement, acceptCharset.type, String] {
      def toMountPoint(element: HTMLFormElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.acceptCharset = _)
      }
    }
  }
  object accessKey extends PropertyFunction {
    @inline protected def attributeName = "accessKey"
    implicit object Element extends MountPointBuilder[Element, accessKey.type, String] {
      def toMountPoint(element: Element, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.accessKey = _)
      }
    }
  }
  object action extends PropertyFunction {
    @inline protected def attributeName = "action"
    @deprecated("Obsolete.", "HTML 4.01") implicit object HTMLIsIndexElement extends MountPointBuilder[HTMLIsIndexElement, action.type, String] {
      @deprecated("Obsolete.", "HTML 4.01") def toMountPoint(element: HTMLIsIndexElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.action = _)
      }
    }
    implicit object HTMLFormElement extends MountPointBuilder[HTMLFormElement, action.type, String] {
      def toMountPoint(element: HTMLFormElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.action = _)
      }
    }
  }
  object align extends PropertyFunction {
    @inline protected def attributeName = "align"
    implicit object HTMLLegendElement extends MountPointBuilder[HTMLLegendElement, align.type, String] {
      def toMountPoint(element: HTMLLegendElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.align = _)
      }
    }
  }
  object alt extends PropertyFunction {
    @inline protected def attributeName = "alt"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, alt.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.alt = _)
      }
    }
    implicit object HTMLImageElement extends MountPointBuilder[HTMLImageElement, alt.type, String] {
      def toMountPoint(element: HTMLImageElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.alt = _)
      }
    }
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, alt.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.alt = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, alt.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.alt = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, alt.type, String] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.alt = _)
      }
    }
  }
  object altHtml extends PropertyFunction {
    @inline protected def attributeName = "altHtml"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, altHtml.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.altHtml = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, altHtml.type, String] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.altHtml = _)
      }
    }
  }
  object archive extends PropertyFunction {
    @inline protected def attributeName = "archive"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, archive.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.archive = _)
      }
    }
  }
  object async extends PropertyFunction {
    @inline protected def attributeName = "async"
    implicit object HTMLScriptElement extends MountPointBuilder[HTMLScriptElement, async.type, Boolean] {
      def toMountPoint(element: HTMLScriptElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.async = _)
      }
    }
  }
  object autocomplete extends PropertyFunction {
    @inline protected def attributeName = "autocomplete"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, autocomplete.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.autocomplete = _)
      }
    }
    implicit object HTMLFormElement extends MountPointBuilder[HTMLFormElement, autocomplete.type, String] {
      def toMountPoint(element: HTMLFormElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.autocomplete = _)
      }
    }
  }
  object autofocus extends PropertyFunction {
    @inline protected def attributeName = "autofocus"
    implicit object HTMLSelectElement extends MountPointBuilder[HTMLSelectElement, autofocus.type, Boolean] {
      def toMountPoint(element: HTMLSelectElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.autofocus = _)
      }
    }
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, autofocus.type, Boolean] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.autofocus = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, autofocus.type, Boolean] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.autofocus = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, autofocus.type, Boolean] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.autofocus = _)
      }
    }
  }
  object autoplay extends PropertyFunction {
    @inline protected def attributeName = "autoplay"
    implicit object HTMLMediaElement extends MountPointBuilder[HTMLMediaElement, autoplay.type, Boolean] {
      def toMountPoint(element: HTMLMediaElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.autoplay = _)
      }
    }
  }
  object balance extends PropertyFunction {
    @inline protected def attributeName = "balance"
    @deprecated("Non standard.", "forever") implicit object HTMLBGSoundElement extends MountPointBuilder[HTMLBGSoundElement, balance.type, js.Any] {
      @deprecated("Non standard.", "forever") def toMountPoint(element: HTMLBGSoundElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.balance = _)
      }
    }
  }
  object behavior extends PropertyFunction {
    @inline protected def attributeName = "behavior"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, behavior.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.behavior = _)
      }
    }
  }
  object border extends PropertyFunction {
    @inline protected def attributeName = "border"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, border.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.border = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, border.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.border = _)
      }
    }
    implicit object HTMLIFrameElement extends MountPointBuilder[HTMLIFrameElement, border.type, String] {
      def toMountPoint(element: HTMLIFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.border = _)
      }
    }
  }
  object borderColor extends PropertyFunction {
    @inline protected def attributeName = "borderColor"
    implicit object HTMLTableRowElement extends MountPointBuilder[HTMLTableRowElement, borderColor.type, js.Any] {
      def toMountPoint(element: HTMLTableRowElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.borderColor = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, borderColor.type, js.Any] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.borderColor = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, borderColor.type, js.Any] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.borderColor = _)
      }
    }
  }
  object borderColorDark extends PropertyFunction {
    @inline protected def attributeName = "borderColorDark"
    implicit object HTMLTableRowElement extends MountPointBuilder[HTMLTableRowElement, borderColorDark.type, js.Any] {
      def toMountPoint(element: HTMLTableRowElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.borderColorDark = _)
      }
    }
  }
  object borderColorLight extends PropertyFunction {
    @inline protected def attributeName = "borderColorLight"
    implicit object HTMLTableRowElement extends MountPointBuilder[HTMLTableRowElement, borderColorLight.type, js.Any] {
      def toMountPoint(element: HTMLTableRowElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.borderColorLight = _)
      }
    }
  }
  object caption extends PropertyFunction {
    @inline protected def attributeName = "caption"
    implicit object HTMLTableElement extends MountPointBuilder[HTMLTableElement, caption.type, HTMLTableCaptionElement] {
      def toMountPoint(element: HTMLTableElement, binding: Binding[HTMLTableCaptionElement]) = {
        Binding.BindingInstances.map(binding)(element.caption = _)
      }
    }
  }
  object charset extends PropertyFunction {
    @inline protected def attributeName = "charset"
    implicit object HTMLMetaElement extends MountPointBuilder[HTMLMetaElement, charset.type, String] {
      def toMountPoint(element: HTMLMetaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.charset = _)
      }
    }
    implicit object HTMLScriptElement extends MountPointBuilder[HTMLScriptElement, charset.type, String] {
      def toMountPoint(element: HTMLScriptElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.charset = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, charset.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.charset = _)
      }
    }
  }
  object checked extends PropertyFunction {
    @inline protected def attributeName = "checked"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, checked.type, Boolean] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.checked = _)
      }
    }
  }
  object cite extends PropertyFunction {
    @inline protected def attributeName = "cite"
    implicit object HTMLQuoteElement extends MountPointBuilder[HTMLQuoteElement, cite.type, String] {
      def toMountPoint(element: HTMLQuoteElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.cite = _)
      }
    }
    implicit object HTMLModElement extends MountPointBuilder[HTMLModElement, cite.type, String] {
      def toMountPoint(element: HTMLModElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.cite = _)
      }
    }
  }
  object classList extends PropertyFunction {
    @inline protected def attributeName = "classList"
    implicit object Element extends MountPointBuilder[Element, classList.type, DOMTokenList] {
      def toMountPoint(element: Element, binding: Binding[DOMTokenList]) = {
        Binding.BindingInstances.map(binding)(element.classList = _)
      }
    }
  }
  object className extends PropertyFunction {
    @inline protected def attributeName = "className"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, className.type, String] {
      def toMountPoint(element: HTMLElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.className = _)
      }
    }
  }
  object classid extends PropertyFunction {
    @inline protected def attributeName = "classid"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, classid.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.classid = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, classid.type, String] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.classid = _)
      }
    }
  }
  object code extends PropertyFunction {
    @inline protected def attributeName = "code"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, code.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.code = _)
      }
    }
  }
  object codeBase extends PropertyFunction {
    @inline protected def attributeName = "codeBase"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, codeBase.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.codeBase = _)
      }
    }
  }
  object codeType extends PropertyFunction {
    @inline protected def attributeName = "codeType"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, codeType.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.codeType = _)
      }
    }
  }
  object colSpan extends PropertyFunction {
    @inline protected def attributeName = "colSpan"
    implicit object HTMLTableCellElement extends MountPointBuilder[HTMLTableCellElement, colSpan.type, Int] {
      def toMountPoint(element: HTMLTableCellElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.colSpan = _)
      }
    }
  }
  object cols extends PropertyFunction {
    @inline protected def attributeName = "cols"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, cols.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.cols = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, cols.type, Int] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.cols = _)
      }
    }
  }
  object content extends PropertyFunction {
    @inline protected def attributeName = "content"
    implicit object HTMLMetaElement extends MountPointBuilder[HTMLMetaElement, content.type, String] {
      def toMountPoint(element: HTMLMetaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.content = _)
      }
    }
  }
  object contentDocument extends PropertyFunction {
    @inline protected def attributeName = "contentDocument"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, contentDocument.type, Document] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[Document]) = {
        Binding.BindingInstances.map(binding)(element.contentDocument = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, contentDocument.type, Document] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[Document]) = {
        Binding.BindingInstances.map(binding)(element.contentDocument = _)
      }
    }
  }
  object contentEditable extends PropertyFunction {
    @inline protected def attributeName = "contentEditable"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, contentEditable.type, String] {
      def toMountPoint(element: HTMLElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.contentEditable = _)
      }
    }
  }
  object contentWindow extends PropertyFunction {
    @inline protected def attributeName = "contentWindow"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, contentWindow.type, Window] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[Window]) = {
        Binding.BindingInstances.map(binding)(element.contentWindow = _)
      }
    }
  }
  object controls extends PropertyFunction {
    @inline protected def attributeName = "controls"
    implicit object HTMLMediaElement extends MountPointBuilder[HTMLMediaElement, controls.type, Boolean] {
      def toMountPoint(element: HTMLMediaElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.controls = _)
      }
    }
  }
  object coords extends PropertyFunction {
    @inline protected def attributeName = "coords"
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, coords.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.coords = _)
      }
    }
  }
  object currentTime extends PropertyFunction {
    @inline protected def attributeName = "currentTime"
    implicit object HTMLMediaElement extends MountPointBuilder[HTMLMediaElement, currentTime.type, Double] {
      def toMountPoint(element: HTMLMediaElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.currentTime = _)
      }
    }
  }
  object data extends PropertyFunction {
    @inline protected def attributeName = "data"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, data.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.data = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, data.type, String] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.data = _)
      }
    }
  }
  object dateTime extends PropertyFunction {
    @inline protected def attributeName = "dateTime"
    implicit object HTMLQuoteElement extends MountPointBuilder[HTMLQuoteElement, dateTime.type, String] {
      def toMountPoint(element: HTMLQuoteElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.dateTime = _)
      }
    }
    implicit object HTMLPhraseElement extends MountPointBuilder[HTMLPhraseElement, dateTime.type, String] {
      def toMountPoint(element: HTMLPhraseElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.dateTime = _)
      }
    }
    implicit object HTMLModElement extends MountPointBuilder[HTMLModElement, dateTime.type, String] {
      def toMountPoint(element: HTMLModElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.dateTime = _)
      }
    }
  }
  object declare extends PropertyFunction {
    @inline protected def attributeName = "declare"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, declare.type, Boolean] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.declare = _)
      }
    }
  }
  object defaultChecked extends PropertyFunction {
    @inline protected def attributeName = "defaultChecked"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, defaultChecked.type, Boolean] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.defaultChecked = _)
      }
    }
  }
  object defaultPlaybackRate extends PropertyFunction {
    @inline protected def attributeName = "defaultPlaybackRate"
    implicit object HTMLMediaElement extends MountPointBuilder[HTMLMediaElement, defaultPlaybackRate.type, Double] {
      def toMountPoint(element: HTMLMediaElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.defaultPlaybackRate = _)
      }
    }
  }
  object defaultSelected extends PropertyFunction {
    @inline protected def attributeName = "defaultSelected"
    implicit object HTMLOptionElement extends MountPointBuilder[HTMLOptionElement, defaultSelected.type, Boolean] {
      def toMountPoint(element: HTMLOptionElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.defaultSelected = _)
      }
    }
  }
  object defaultValue extends PropertyFunction {
    @inline protected def attributeName = "defaultValue"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, defaultValue.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.defaultValue = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, defaultValue.type, String] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.defaultValue = _)
      }
    }
  }
  object defer extends PropertyFunction {
    @inline protected def attributeName = "defer"
    implicit object HTMLScriptElement extends MountPointBuilder[HTMLScriptElement, defer.type, Boolean] {
      def toMountPoint(element: HTMLScriptElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.defer = _)
      }
    }
  }
  object dir extends PropertyFunction {
    @inline protected def attributeName = "dir"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, dir.type, String] {
      def toMountPoint(element: HTMLElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.dir = _)
      }
    }
  }
  object direction extends PropertyFunction {
    @inline protected def attributeName = "direction"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, direction.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.direction = _)
      }
    }
  }
  object disabled extends PropertyFunction {
    @inline protected def attributeName = "disabled"
    implicit object HTMLSelectElement extends MountPointBuilder[HTMLSelectElement, disabled.type, Boolean] {
      def toMountPoint(element: HTMLSelectElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.disabled = _)
      }
    }
    implicit object HTMLOptionElement extends MountPointBuilder[HTMLOptionElement, disabled.type, Boolean] {
      def toMountPoint(element: HTMLOptionElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.disabled = _)
      }
    }
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, disabled.type, Boolean] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.disabled = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, disabled.type, Boolean] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.disabled = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, disabled.type, Boolean] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.disabled = _)
      }
    }
    implicit object HTMLFieldSetElement extends MountPointBuilder[HTMLFieldSetElement, disabled.type, Boolean] {
      def toMountPoint(element: HTMLFieldSetElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.disabled = _)
      }
    }
    implicit object HTMLOptGroupElement extends MountPointBuilder[HTMLOptGroupElement, disabled.type, Boolean] {
      def toMountPoint(element: HTMLOptGroupElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.disabled = _)
      }
    }
  }
  object draggable extends PropertyFunction {
    @inline protected def attributeName = "draggable"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, draggable.type, Boolean] {
      def toMountPoint(element: HTMLElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.draggable = _)
      }
    }
  }
  object encoding extends PropertyFunction {
    @inline protected def attributeName = "encoding"
    implicit object HTMLFormElement extends MountPointBuilder[HTMLFormElement, encoding.type, String] {
      def toMountPoint(element: HTMLFormElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.encoding = _)
      }
    }
  }
  object enctype extends PropertyFunction {
    @inline protected def attributeName = "enctype"
    implicit object HTMLFormElement extends MountPointBuilder[HTMLFormElement, enctype.type, String] {
      def toMountPoint(element: HTMLFormElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.enctype = _)
      }
    }
  }
  object event extends PropertyFunction {
    @inline protected def attributeName = "event"
    implicit object HTMLScriptElement extends MountPointBuilder[HTMLScriptElement, event.type, String] {
      def toMountPoint(element: HTMLScriptElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.event = _)
      }
    }
  }
  object face extends PropertyFunction {
    @inline protected def attributeName = "face"
    @deprecated("Obsolete.", "HTML 4.01") implicit object HTMLFontElement extends MountPointBuilder[HTMLFontElement, face.type, String] {
      @deprecated("Obsolete.", "HTML 4.01") def toMountPoint(element: HTMLFontElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.face = _)
      }
    }
    @deprecated("Obsolete.", "DOM Level 2") implicit object HTMLBaseFontElement extends MountPointBuilder[HTMLBaseFontElement, face.type, String] {
      @deprecated("Obsolete.", "DOM Level 2") def toMountPoint(element: HTMLBaseFontElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.face = _)
      }
    }
  }
  object files extends PropertyFunction {
    @inline protected def attributeName = "files"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, files.type, FileList] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[FileList]) = {
        Binding.BindingInstances.map(binding)(element.files = _)
      }
    }
  }
  object filters extends PropertyFunction {
    @inline protected def attributeName = "filters"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, filters.type, Object] {
      def toMountPoint(element: HTMLElement, binding: Binding[Object]) = {
        Binding.BindingInstances.map(binding)(element.filters = _)
      }
    }
  }
  object form extends PropertyFunction {
    @inline protected def attributeName = "form"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, form.type, HTMLFormElement] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[HTMLFormElement]) = {
        Binding.BindingInstances.map(binding)(element.form = _)
      }
    }
    @deprecated("Obsolete.", "HTML 4.01") implicit object HTMLIsIndexElement extends MountPointBuilder[HTMLIsIndexElement, form.type, HTMLFormElement] {
      @deprecated("Obsolete.", "HTML 4.01") def toMountPoint(element: HTMLIsIndexElement, binding: Binding[HTMLFormElement]) = {
        Binding.BindingInstances.map(binding)(element.form = _)
      }
    }
    implicit object HTMLProgressElement extends MountPointBuilder[HTMLProgressElement, form.type, HTMLFormElement] {
      def toMountPoint(element: HTMLProgressElement, binding: Binding[HTMLFormElement]) = {
        Binding.BindingInstances.map(binding)(element.form = _)
      }
    }
  }
  object formAction extends PropertyFunction {
    @inline protected def attributeName = "formAction"
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, formAction.type, String] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.formAction = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, formAction.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.formAction = _)
      }
    }
  }
  object formEnctype extends PropertyFunction {
    @inline protected def attributeName = "formEnctype"
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, formEnctype.type, String] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.formEnctype = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, formEnctype.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.formEnctype = _)
      }
    }
  }
  object formMethod extends PropertyFunction {
    @inline protected def attributeName = "formMethod"
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, formMethod.type, String] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.formMethod = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, formMethod.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.formMethod = _)
      }
    }
  }
  object formNoValidate extends PropertyFunction {
    @inline protected def attributeName = "formNoValidate"
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, formNoValidate.type, String] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.formNoValidate = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, formNoValidate.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.formNoValidate = _)
      }
    }
  }
  object formTarget extends PropertyFunction {
    @inline protected def attributeName = "formTarget"
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, formTarget.type, String] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.formTarget = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, formTarget.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.formTarget = _)
      }
    }
  }
  object frameBorder extends PropertyFunction {
    @inline protected def attributeName = "frameBorder"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, frameBorder.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.frameBorder = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, frameBorder.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.frameBorder = _)
      }
    }
  }
  object frameSpacing extends PropertyFunction {
    @inline protected def attributeName = "frameSpacing"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, frameSpacing.type, js.Any] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.frameSpacing = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, frameSpacing.type, js.Any] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.frameSpacing = _)
      }
    }
  }
  object gotpointercapture extends PropertyFunction {
    @inline protected def attributeName = "gotpointercapture"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, gotpointercapture.type, js.Function1[PointerEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[PointerEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.gotpointercapture = _)
      }
    }
  }
  object hash extends PropertyFunction {
    @inline protected def attributeName = "hash"
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, hash.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.hash = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, hash.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.hash = _)
      }
    }
  }
  object height extends PropertyFunction {
    @inline protected def attributeName = "height"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, height.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
    implicit object HTMLImageElement extends MountPointBuilder[HTMLImageElement, height.type, Int] {
      def toMountPoint(element: HTMLImageElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
    implicit object HTMLTableRowElement extends MountPointBuilder[HTMLTableRowElement, height.type, js.Any] {
      def toMountPoint(element: HTMLTableRowElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, height.type, js.Any] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
    implicit object HTMLIFrameElement extends MountPointBuilder[HTMLIFrameElement, height.type, String] {
      def toMountPoint(element: HTMLIFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, height.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
    implicit object HTMLCanvasElement extends MountPointBuilder[HTMLCanvasElement, height.type, Int] {
      def toMountPoint(element: HTMLCanvasElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, height.type, String] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
    implicit object HTMLEmbedElement extends MountPointBuilder[HTMLEmbedElement, height.type, String] {
      def toMountPoint(element: HTMLEmbedElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
    implicit object HTMLVideoElement extends MountPointBuilder[HTMLVideoElement, height.type, Int] {
      def toMountPoint(element: HTMLVideoElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, height.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.height = _)
      }
    }
  }
  object host extends PropertyFunction {
    @inline protected def attributeName = "host"
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, host.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.host = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, host.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.host = _)
      }
    }
  }
  object hostname extends PropertyFunction {
    @inline protected def attributeName = "hostname"
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, hostname.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.hostname = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, hostname.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.hostname = _)
      }
    }
  }
  object href extends PropertyFunction {
    @inline protected def attributeName = "href"
    implicit object HTMLBaseElement extends MountPointBuilder[HTMLBaseElement, href.type, String] {
      def toMountPoint(element: HTMLBaseElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.href = _)
      }
    }
    implicit object HTMLLinkElement extends MountPointBuilder[HTMLLinkElement, href.type, String] {
      def toMountPoint(element: HTMLLinkElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.href = _)
      }
    }
    implicit object HTMLImageElement extends MountPointBuilder[HTMLImageElement, href.type, String] {
      def toMountPoint(element: HTMLImageElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.href = _)
      }
    }
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, href.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.href = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, href.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.href = _)
      }
    }
  }
  object hreflang extends PropertyFunction {
    @inline protected def attributeName = "hreflang"
    implicit object HTMLLinkElement extends MountPointBuilder[HTMLLinkElement, hreflang.type, String] {
      def toMountPoint(element: HTMLLinkElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.hreflang = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, hreflang.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.hreflang = _)
      }
    }
  }
  object hspace extends PropertyFunction {
    @inline protected def attributeName = "hspace"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, hspace.type, Int] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.hspace = _)
      }
    }
  }
  object htmlFor extends PropertyFunction {
    @inline protected def attributeName = "htmlFor"
    implicit object HTMLLabelElement extends MountPointBuilder[HTMLLabelElement, htmlFor.type, String] {
      def toMountPoint(element: HTMLLabelElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.htmlFor = _)
      }
    }
  }
  object httpEquiv extends PropertyFunction {
    @inline protected def attributeName = "httpEquiv"
    implicit object HTMLMetaElement extends MountPointBuilder[HTMLMetaElement, httpEquiv.type, String] {
      def toMountPoint(element: HTMLMetaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.httpEquiv = _)
      }
    }
  }
  object id extends PropertyFunction {
    @inline protected def attributeName = "id"
    implicit object Element extends MountPointBuilder[Element, id.type, String] {
      def toMountPoint(element: Element, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.id = _)
      }
    }
  }
  object indeterminate extends PropertyFunction {
    @inline protected def attributeName = "indeterminate"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, indeterminate.type, Boolean] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.indeterminate = _)
      }
    }
  }
  object innerHTML extends PropertyFunction {
    @inline protected def attributeName = "innerHTML"
    implicit object Element extends MountPointBuilder[Element, innerHTML.type, String] {
      def toMountPoint(element: Element, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.innerHTML = _)
      }
    }
  }
  object isMap extends PropertyFunction {
    @inline protected def attributeName = "isMap"
    implicit object HTMLImageElement extends MountPointBuilder[HTMLImageElement, isMap.type, Boolean] {
      def toMountPoint(element: HTMLImageElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.isMap = _)
      }
    }
  }
  object kind extends PropertyFunction {
    @inline protected def attributeName = "kind"
    implicit object HTMLTrackElement extends MountPointBuilder[HTMLTrackElement, kind.type, String] {
      def toMountPoint(element: HTMLTrackElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.kind = _)
      }
    }
  }
  object label extends PropertyFunction {
    @inline protected def attributeName = "label"
    implicit object HTMLOptionElement extends MountPointBuilder[HTMLOptionElement, label.type, String] {
      def toMountPoint(element: HTMLOptionElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.label = _)
      }
    }
    implicit object HTMLOptGroupElement extends MountPointBuilder[HTMLOptGroupElement, label.type, String] {
      def toMountPoint(element: HTMLOptGroupElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.label = _)
      }
    }
    implicit object HTMLTrackElement extends MountPointBuilder[HTMLTrackElement, label.type, String] {
      def toMountPoint(element: HTMLTrackElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.label = _)
      }
    }
  }
  object lang extends PropertyFunction {
    @inline protected def attributeName = "lang"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, lang.type, String] {
      def toMountPoint(element: HTMLElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.lang = _)
      }
    }
  }
  object length extends PropertyFunction {
    @inline protected def attributeName = "length"
    implicit object HTMLSelectElement extends MountPointBuilder[HTMLSelectElement, length.type, Int] {
      def toMountPoint(element: HTMLSelectElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.length = _)
      }
    }
  }
  object list extends PropertyFunction {
    @inline protected def attributeName = "list"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, list.type, HTMLElement] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[HTMLElement]) = {
        Binding.BindingInstances.map(binding)(element.list = _)
      }
    }
  }
  object longDesc extends PropertyFunction {
    @inline protected def attributeName = "longDesc"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, longDesc.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.longDesc = _)
      }
    }
  }
  object loop extends PropertyFunction {
    @inline protected def attributeName = "loop"
    implicit object HTMLMediaElement extends MountPointBuilder[HTMLMediaElement, loop.type, Boolean] {
      def toMountPoint(element: HTMLMediaElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.loop = _)
      }
    }
    @deprecated("Non standard.", "forever") implicit object HTMLBGSoundElement extends MountPointBuilder[HTMLBGSoundElement, loop.type, Double] {
      @deprecated("Non standard.", "forever") def toMountPoint(element: HTMLBGSoundElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.loop = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, loop.type, Int] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.loop = _)
      }
    }
  }
  object lostpointercapture extends PropertyFunction {
    @inline protected def attributeName = "lostpointercapture"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, lostpointercapture.type, js.Function1[PointerEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[PointerEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.lostpointercapture = _)
      }
    }
  }
  object marginHeight extends PropertyFunction {
    @inline protected def attributeName = "marginHeight"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, marginHeight.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.marginHeight = _)
      }
    }
  }
  object marginWidth extends PropertyFunction {
    @inline protected def attributeName = "marginWidth"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, marginWidth.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.marginWidth = _)
      }
    }
  }
  object max extends PropertyFunction {
    @inline protected def attributeName = "max"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, max.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.max = _)
      }
    }
    implicit object HTMLProgressElement extends MountPointBuilder[HTMLProgressElement, max.type, Double] {
      def toMountPoint(element: HTMLProgressElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.max = _)
      }
    }
  }
  object maxLength extends PropertyFunction {
    @inline protected def attributeName = "maxLength"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, maxLength.type, Int] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.maxLength = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, maxLength.type, Int] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.maxLength = _)
      }
    }
  }
  object media extends PropertyFunction {
    @inline protected def attributeName = "media"
    implicit object HTMLLinkElement extends MountPointBuilder[HTMLLinkElement, media.type, String] {
      def toMountPoint(element: HTMLLinkElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.media = _)
      }
    }
    implicit object HTMLSourceElement extends MountPointBuilder[HTMLSourceElement, media.type, String] {
      def toMountPoint(element: HTMLSourceElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.media = _)
      }
    }
    implicit object HTMLStyleElement extends MountPointBuilder[HTMLStyleElement, media.type, String] {
      def toMountPoint(element: HTMLStyleElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.media = _)
      }
    }
  }
  object method extends PropertyFunction {
    @inline protected def attributeName = "method"
    implicit object HTMLFormElement extends MountPointBuilder[HTMLFormElement, method.type, String] {
      def toMountPoint(element: HTMLFormElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.method = _)
      }
    }
  }
  object mimeType extends PropertyFunction {
    @inline protected def attributeName = "mimeType"
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, mimeType.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.mimeType = _)
      }
    }
  }
  object min extends PropertyFunction {
    @inline protected def attributeName = "min"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, min.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.min = _)
      }
    }
  }
  object multiple extends PropertyFunction {
    @inline protected def attributeName = "multiple"
    implicit object HTMLSelectElement extends MountPointBuilder[HTMLSelectElement, multiple.type, Boolean] {
      def toMountPoint(element: HTMLSelectElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.multiple = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, multiple.type, Boolean] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.multiple = _)
      }
    }
  }
  object muted extends PropertyFunction {
    @inline protected def attributeName = "muted"
    implicit object HTMLMediaElement extends MountPointBuilder[HTMLMediaElement, muted.type, Boolean] {
      def toMountPoint(element: HTMLMediaElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.muted = _)
      }
    }
  }
  object name extends PropertyFunction {
    @inline protected def attributeName = "name"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, name.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    implicit object HTMLSelectElement extends MountPointBuilder[HTMLSelectElement, name.type, String] {
      def toMountPoint(element: HTMLSelectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    implicit object HTMLMetaElement extends MountPointBuilder[HTMLMetaElement, name.type, String] {
      def toMountPoint(element: HTMLMetaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    implicit object HTMLMapElement extends MountPointBuilder[HTMLMapElement, name.type, String] {
      def toMountPoint(element: HTMLMapElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, name.type, String] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, name.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, name.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    implicit object HTMLIFrameElement extends MountPointBuilder[HTMLIFrameElement, name.type, String] {
      def toMountPoint(element: HTMLIFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, name.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    implicit object HTMLParamElement extends MountPointBuilder[HTMLParamElement, name.type, String] {
      def toMountPoint(element: HTMLParamElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, name.type, String] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, name.type, String] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
    implicit object HTMLFormElement extends MountPointBuilder[HTMLFormElement, name.type, String] {
      def toMountPoint(element: HTMLFormElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.name = _)
      }
    }
  }
  object naturalHeight extends PropertyFunction {
    @inline protected def attributeName = "naturalHeight"
    implicit object HTMLImageElement extends MountPointBuilder[HTMLImageElement, naturalHeight.type, Int] {
      def toMountPoint(element: HTMLImageElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.naturalHeight = _)
      }
    }
  }
  object naturalWidth extends PropertyFunction {
    @inline protected def attributeName = "naturalWidth"
    implicit object HTMLImageElement extends MountPointBuilder[HTMLImageElement, naturalWidth.type, Int] {
      def toMountPoint(element: HTMLImageElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.naturalWidth = _)
      }
    }
  }
  object noResize extends PropertyFunction {
    @inline protected def attributeName = "noResize"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, noResize.type, Boolean] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.noResize = _)
      }
    }
  }
  object noValidate extends PropertyFunction {
    @inline protected def attributeName = "noValidate"
    implicit object HTMLFormElement extends MountPointBuilder[HTMLFormElement, noValidate.type, Boolean] {
      def toMountPoint(element: HTMLFormElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.noValidate = _)
      }
    }
  }
  object noWrap extends PropertyFunction {
    @inline protected def attributeName = "noWrap"
    implicit object HTMLDDElement extends MountPointBuilder[HTMLDDElement, noWrap.type, Boolean] {
      def toMountPoint(element: HTMLDDElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.noWrap = _)
      }
    }
    implicit object HTMLDTElement extends MountPointBuilder[HTMLDTElement, noWrap.type, Boolean] {
      def toMountPoint(element: HTMLDTElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.noWrap = _)
      }
    }
  }
  object `object` extends PropertyFunction {
    @inline protected def attributeName = "object"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, `object`.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`object` = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, `object`.type, Object] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[Object]) = {
        Binding.BindingInstances.map(binding)(element.`object` = _)
      }
    }
  }
  object onabort extends PropertyFunction {
    @inline protected def attributeName = "onabort"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onabort.type, js.Function1[UIEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[UIEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onabort = _)
      }
    }
  }
  object onactivate extends PropertyFunction {
    @inline protected def attributeName = "onactivate"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onactivate.type, js.Function1[UIEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[UIEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onactivate = _)
      }
    }
  }
  object onafterprint extends PropertyFunction {
    @inline protected def attributeName = "onafterprint"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onafterprint.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onafterprint = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onafterprint.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onafterprint = _)
      }
    }
  }
  object onbeforeactivate extends PropertyFunction {
    @inline protected def attributeName = "onbeforeactivate"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onbeforeactivate.type, js.Function1[UIEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[UIEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onbeforeactivate = _)
      }
    }
  }
  object onbeforecopy extends PropertyFunction {
    @inline protected def attributeName = "onbeforecopy"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onbeforecopy.type, js.Function1[DragEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[DragEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onbeforecopy = _)
      }
    }
  }
  object onbeforecut extends PropertyFunction {
    @inline protected def attributeName = "onbeforecut"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onbeforecut.type, js.Function1[DragEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[DragEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onbeforecut = _)
      }
    }
  }
  object onbeforedeactivate extends PropertyFunction {
    @inline protected def attributeName = "onbeforedeactivate"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onbeforedeactivate.type, js.Function1[UIEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[UIEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onbeforedeactivate = _)
      }
    }
  }
  object onbeforepaste extends PropertyFunction {
    @inline protected def attributeName = "onbeforepaste"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onbeforepaste.type, js.Function1[DragEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[DragEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onbeforepaste = _)
      }
    }
  }
  object onbeforeprint extends PropertyFunction {
    @inline protected def attributeName = "onbeforeprint"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onbeforeprint.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onbeforeprint = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onbeforeprint.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onbeforeprint = _)
      }
    }
  }
  object onbeforeunload extends PropertyFunction {
    @inline protected def attributeName = "onbeforeunload"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onbeforeunload.type, js.Function1[BeforeUnloadEvent, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[BeforeUnloadEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onbeforeunload = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onbeforeunload.type, js.Function1[BeforeUnloadEvent, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[BeforeUnloadEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onbeforeunload = _)
      }
    }
  }
  object onblur extends PropertyFunction {
    @inline protected def attributeName = "onblur"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onblur.type, js.Function1[FocusEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[FocusEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onblur = _)
      }
    }
  }
  object onbounce extends PropertyFunction {
    @inline protected def attributeName = "onbounce"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, onbounce.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onbounce = _)
      }
    }
  }
  object oncanplay extends PropertyFunction {
    @inline protected def attributeName = "oncanplay"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, oncanplay.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.oncanplay = _)
      }
    }
  }
  object oncanplaythrough extends PropertyFunction {
    @inline protected def attributeName = "oncanplaythrough"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, oncanplaythrough.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.oncanplaythrough = _)
      }
    }
  }
  object onchange extends PropertyFunction {
    @inline protected def attributeName = "onchange"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onchange.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onchange = _)
      }
    }
  }
  object onclick extends PropertyFunction {
    @inline protected def attributeName = "onclick"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onclick.type, js.Function1[MouseEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[MouseEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onclick = _)
      }
    }
  }
  object oncontextmenu extends PropertyFunction {
    @inline protected def attributeName = "oncontextmenu"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, oncontextmenu.type, js.Function1[MouseEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[MouseEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.oncontextmenu = _)
      }
    }
  }
  object oncopy extends PropertyFunction {
    @inline protected def attributeName = "oncopy"
    implicit object Element extends MountPointBuilder[Element, oncopy.type, js.Function1[ClipboardEvent, _]] {
      def toMountPoint(element: Element, binding: Binding[js.Function1[ClipboardEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.oncopy = _)
      }
    }
  }
  object oncuechange extends PropertyFunction {
    @inline protected def attributeName = "oncuechange"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, oncuechange.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.oncuechange = _)
      }
    }
  }
  object oncut extends PropertyFunction {
    @inline protected def attributeName = "oncut"
    implicit object Element extends MountPointBuilder[Element, oncut.type, js.Function1[ClipboardEvent, _]] {
      def toMountPoint(element: Element, binding: Binding[js.Function1[ClipboardEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.oncut = _)
      }
    }
  }
  object ondblclick extends PropertyFunction {
    @inline protected def attributeName = "ondblclick"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ondblclick.type, js.Function1[MouseEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[MouseEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.ondblclick = _)
      }
    }
  }
  object ondeactivate extends PropertyFunction {
    @inline protected def attributeName = "ondeactivate"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ondeactivate.type, js.Function1[UIEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[UIEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.ondeactivate = _)
      }
    }
  }
  object ondrag extends PropertyFunction {
    @inline protected def attributeName = "ondrag"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ondrag.type, js.Function1[DragEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[DragEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.ondrag = _)
      }
    }
  }
  object ondragend extends PropertyFunction {
    @inline protected def attributeName = "ondragend"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ondragend.type, js.Function1[DragEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[DragEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.ondragend = _)
      }
    }
  }
  object ondragenter extends PropertyFunction {
    @inline protected def attributeName = "ondragenter"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ondragenter.type, js.Function1[DragEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[DragEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.ondragenter = _)
      }
    }
  }
  object ondragleave extends PropertyFunction {
    @inline protected def attributeName = "ondragleave"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ondragleave.type, js.Function1[DragEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[DragEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.ondragleave = _)
      }
    }
  }
  object ondragover extends PropertyFunction {
    @inline protected def attributeName = "ondragover"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ondragover.type, js.Function1[DragEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[DragEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.ondragover = _)
      }
    }
  }
  object ondragstart extends PropertyFunction {
    @inline protected def attributeName = "ondragstart"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ondragstart.type, js.Function1[DragEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[DragEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.ondragstart = _)
      }
    }
  }
  object ondrop extends PropertyFunction {
    @inline protected def attributeName = "ondrop"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ondrop.type, js.Function1[DragEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[DragEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.ondrop = _)
      }
    }
  }
  object ondurationchange extends PropertyFunction {
    @inline protected def attributeName = "ondurationchange"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ondurationchange.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.ondurationchange = _)
      }
    }
  }
  object onemptied extends PropertyFunction {
    @inline protected def attributeName = "onemptied"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onemptied.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onemptied = _)
      }
    }
  }
  object onended extends PropertyFunction {
    @inline protected def attributeName = "onended"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onended.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onended = _)
      }
    }
  }
  object onerror extends PropertyFunction {
    @inline protected def attributeName = "onerror"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onerror.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onerror = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onerror.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onerror = _)
      }
    }
  }
  object onfinish extends PropertyFunction {
    @inline protected def attributeName = "onfinish"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, onfinish.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onfinish = _)
      }
    }
  }
  object onfocus extends PropertyFunction {
    @inline protected def attributeName = "onfocus"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onfocus.type, js.Function1[FocusEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[FocusEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onfocus = _)
      }
    }
  }
  object onfocusin extends PropertyFunction {
    @inline protected def attributeName = "onfocusin"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onfocusin.type, js.Function1[FocusEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[FocusEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onfocusin = _)
      }
    }
  }
  object onfocusout extends PropertyFunction {
    @inline protected def attributeName = "onfocusout"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onfocusout.type, js.Function1[FocusEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[FocusEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onfocusout = _)
      }
    }
  }
  object onhashchange extends PropertyFunction {
    @inline protected def attributeName = "onhashchange"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onhashchange.type, js.Function1[HashChangeEvent, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[HashChangeEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onhashchange = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onhashchange.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onhashchange = _)
      }
    }
  }
  object onhelp extends PropertyFunction {
    @inline protected def attributeName = "onhelp"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onhelp.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onhelp = _)
      }
    }
  }
  object oninput extends PropertyFunction {
    @inline protected def attributeName = "oninput"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, oninput.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.oninput = _)
      }
    }
  }
  object onkeydown extends PropertyFunction {
    @inline protected def attributeName = "onkeydown"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onkeydown.type, js.Function1[KeyboardEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[KeyboardEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onkeydown = _)
      }
    }
  }
  object onkeypress extends PropertyFunction {
    @inline protected def attributeName = "onkeypress"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onkeypress.type, js.Function1[KeyboardEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[KeyboardEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onkeypress = _)
      }
    }
  }
  object onkeyup extends PropertyFunction {
    @inline protected def attributeName = "onkeyup"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onkeyup.type, js.Function1[KeyboardEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[KeyboardEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onkeyup = _)
      }
    }
  }
  object onload extends PropertyFunction {
    @inline protected def attributeName = "onload"
    implicit object HTMLImageElement extends MountPointBuilder[HTMLImageElement, onload.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLImageElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onload = _)
      }
    }
    implicit object HTMLScriptElement extends MountPointBuilder[HTMLScriptElement, onload.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLScriptElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onload = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, onload.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onload = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onload.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onload = _)
      }
    }
    implicit object HTMLIFrameElement extends MountPointBuilder[HTMLIFrameElement, onload.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLIFrameElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onload = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onload.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onload = _)
      }
    }
  }
  object onloadeddata extends PropertyFunction {
    @inline protected def attributeName = "onloadeddata"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onloadeddata.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onloadeddata = _)
      }
    }
  }
  object onloadedmetadata extends PropertyFunction {
    @inline protected def attributeName = "onloadedmetadata"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onloadedmetadata.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onloadedmetadata = _)
      }
    }
  }
  object onloadstart extends PropertyFunction {
    @inline protected def attributeName = "onloadstart"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onloadstart.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onloadstart = _)
      }
    }
  }
  object onmessage extends PropertyFunction {
    @inline protected def attributeName = "onmessage"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onmessage.type, js.Function1[MessageEvent, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[MessageEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onmessage = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onmessage.type, js.Function1[MessageEvent, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[MessageEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onmessage = _)
      }
    }
  }
  object onmousedown extends PropertyFunction {
    @inline protected def attributeName = "onmousedown"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onmousedown.type, js.Function1[MouseEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[MouseEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onmousedown = _)
      }
    }
  }
  object onmouseenter extends PropertyFunction {
    @inline protected def attributeName = "onmouseenter"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onmouseenter.type, js.Function1[MouseEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[MouseEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onmouseenter = _)
      }
    }
  }
  object onmouseleave extends PropertyFunction {
    @inline protected def attributeName = "onmouseleave"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onmouseleave.type, js.Function1[MouseEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[MouseEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onmouseleave = _)
      }
    }
  }
  object onmousemove extends PropertyFunction {
    @inline protected def attributeName = "onmousemove"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onmousemove.type, js.Function1[MouseEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[MouseEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onmousemove = _)
      }
    }
  }
  object onmouseout extends PropertyFunction {
    @inline protected def attributeName = "onmouseout"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onmouseout.type, js.Function1[MouseEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[MouseEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onmouseout = _)
      }
    }
  }
  object onmouseover extends PropertyFunction {
    @inline protected def attributeName = "onmouseover"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onmouseover.type, js.Function1[MouseEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[MouseEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onmouseover = _)
      }
    }
  }
  object onmouseup extends PropertyFunction {
    @inline protected def attributeName = "onmouseup"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onmouseup.type, js.Function1[MouseEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[MouseEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onmouseup = _)
      }
    }
  }
  object onmousewheel extends PropertyFunction {
    @inline protected def attributeName = "onmousewheel"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onmousewheel.type, js.Function1[WheelEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[WheelEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onmousewheel = _)
      }
    }
  }
  object onoffline extends PropertyFunction {
    @inline protected def attributeName = "onoffline"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onoffline.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onoffline = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onoffline.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onoffline = _)
      }
    }
  }
  object ononline extends PropertyFunction {
    @inline protected def attributeName = "ononline"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, ononline.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.ononline = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, ononline.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.ononline = _)
      }
    }
  }
  object onpaste extends PropertyFunction {
    @inline protected def attributeName = "onpaste"
    implicit object Element extends MountPointBuilder[Element, onpaste.type, js.Function1[ClipboardEvent, _]] {
      def toMountPoint(element: Element, binding: Binding[js.Function1[ClipboardEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpaste = _)
      }
    }
  }
  object onpause extends PropertyFunction {
    @inline protected def attributeName = "onpause"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onpause.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpause = _)
      }
    }
  }
  object onplay extends PropertyFunction {
    @inline protected def attributeName = "onplay"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onplay.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onplay = _)
      }
    }
  }
  object onplaying extends PropertyFunction {
    @inline protected def attributeName = "onplaying"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onplaying.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onplaying = _)
      }
    }
  }
  object onpointercancel extends PropertyFunction {
    @inline protected def attributeName = "onpointercancel"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onpointercancel.type, js.Function1[PointerEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[PointerEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpointercancel = _)
      }
    }
  }
  object onpointerdown extends PropertyFunction {
    @inline protected def attributeName = "onpointerdown"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onpointerdown.type, js.Function1[PointerEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[PointerEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpointerdown = _)
      }
    }
  }
  object onpointerenter extends PropertyFunction {
    @inline protected def attributeName = "onpointerenter"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onpointerenter.type, js.Function1[PointerEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[PointerEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpointerenter = _)
      }
    }
  }
  object onpointerleave extends PropertyFunction {
    @inline protected def attributeName = "onpointerleave"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onpointerleave.type, js.Function1[PointerEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[PointerEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpointerleave = _)
      }
    }
  }
  object onpointermove extends PropertyFunction {
    @inline protected def attributeName = "onpointermove"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onpointermove.type, js.Function1[PointerEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[PointerEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpointermove = _)
      }
    }
  }
  object onpointerout extends PropertyFunction {
    @inline protected def attributeName = "onpointerout"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onpointerout.type, js.Function1[PointerEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[PointerEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpointerout = _)
      }
    }
  }
  object onpointerover extends PropertyFunction {
    @inline protected def attributeName = "onpointerover"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onpointerover.type, js.Function1[PointerEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[PointerEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpointerover = _)
      }
    }
  }
  object onpointerup extends PropertyFunction {
    @inline protected def attributeName = "onpointerup"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onpointerup.type, js.Function1[PointerEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[PointerEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpointerup = _)
      }
    }
  }
  object onpopstate extends PropertyFunction {
    @inline protected def attributeName = "onpopstate"
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onpopstate.type, js.Function1[PopStateEvent, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[PopStateEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onpopstate = _)
      }
    }
  }
  object onprogress extends PropertyFunction {
    @inline protected def attributeName = "onprogress"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onprogress.type, js.Function1[js.Any, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[js.Any, _]]) = {
        Binding.BindingInstances.map(binding)(element.onprogress = _)
      }
    }
  }
  object onratechange extends PropertyFunction {
    @inline protected def attributeName = "onratechange"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onratechange.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onratechange = _)
      }
    }
  }
  object onreadystatechange extends PropertyFunction {
    @inline protected def attributeName = "onreadystatechange"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onreadystatechange.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onreadystatechange = _)
      }
    }
  }
  object onreset extends PropertyFunction {
    @inline protected def attributeName = "onreset"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onreset.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onreset = _)
      }
    }
  }
  object onresize extends PropertyFunction {
    @inline protected def attributeName = "onresize"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onresize.type, js.Function1[UIEvent, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[UIEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onresize = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onresize.type, js.Function1[UIEvent, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[UIEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onresize = _)
      }
    }
  }
  object onscroll extends PropertyFunction {
    @inline protected def attributeName = "onscroll"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onscroll.type, js.Function1[UIEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[UIEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onscroll = _)
      }
    }
  }
  object onseeked extends PropertyFunction {
    @inline protected def attributeName = "onseeked"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onseeked.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onseeked = _)
      }
    }
  }
  object onseeking extends PropertyFunction {
    @inline protected def attributeName = "onseeking"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onseeking.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onseeking = _)
      }
    }
  }
  object onselect extends PropertyFunction {
    @inline protected def attributeName = "onselect"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onselect.type, js.Function1[UIEvent, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[UIEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onselect = _)
      }
    }
  }
  object onselectstart extends PropertyFunction {
    @inline protected def attributeName = "onselectstart"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onselectstart.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onselectstart = _)
      }
    }
  }
  object onstalled extends PropertyFunction {
    @inline protected def attributeName = "onstalled"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onstalled.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onstalled = _)
      }
    }
  }
  object onstart extends PropertyFunction {
    @inline protected def attributeName = "onstart"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, onstart.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onstart = _)
      }
    }
  }
  object onstorage extends PropertyFunction {
    @inline protected def attributeName = "onstorage"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onstorage.type, js.Function1[StorageEvent, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[StorageEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onstorage = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onstorage.type, js.Function1[StorageEvent, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[StorageEvent, _]]) = {
        Binding.BindingInstances.map(binding)(element.onstorage = _)
      }
    }
  }
  object onsubmit extends PropertyFunction {
    @inline protected def attributeName = "onsubmit"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onsubmit.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onsubmit = _)
      }
    }
  }
  object onsuspend extends PropertyFunction {
    @inline protected def attributeName = "onsuspend"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onsuspend.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onsuspend = _)
      }
    }
  }
  object ontimeupdate extends PropertyFunction {
    @inline protected def attributeName = "ontimeupdate"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, ontimeupdate.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.ontimeupdate = _)
      }
    }
  }
  object onunload extends PropertyFunction {
    @inline protected def attributeName = "onunload"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, onunload.type, js.Function1[Event, _]] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onunload = _)
      }
    }
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, onunload.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onunload = _)
      }
    }
  }
  object onvolumechange extends PropertyFunction {
    @inline protected def attributeName = "onvolumechange"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onvolumechange.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onvolumechange = _)
      }
    }
  }
  object onwaiting extends PropertyFunction {
    @inline protected def attributeName = "onwaiting"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, onwaiting.type, js.Function1[Event, _]] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Function1[Event, _]]) = {
        Binding.BindingInstances.map(binding)(element.onwaiting = _)
      }
    }
  }
  object outerHTML extends PropertyFunction {
    @inline protected def attributeName = "outerHTML"
    implicit object Element extends MountPointBuilder[Element, outerHTML.type, String] {
      def toMountPoint(element: Element, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.outerHTML = _)
      }
    }
  }
  object parentElement extends PropertyFunction {
    @inline protected def attributeName = "parentElement"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, parentElement.type, HTMLElement] {
      def toMountPoint(element: HTMLElement, binding: Binding[HTMLElement]) = {
        Binding.BindingInstances.map(binding)(element.parentElement = _)
      }
    }
  }
  object pathname extends PropertyFunction {
    @inline protected def attributeName = "pathname"
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, pathname.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.pathname = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, pathname.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.pathname = _)
      }
    }
  }
  object pattern extends PropertyFunction {
    @inline protected def attributeName = "pattern"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, pattern.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.pattern = _)
      }
    }
  }
  object placeholder extends PropertyFunction {
    @inline protected def attributeName = "placeholder"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, placeholder.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.placeholder = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, placeholder.type, String] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.placeholder = _)
      }
    }
  }
  object playbackRate extends PropertyFunction {
    @inline protected def attributeName = "playbackRate"
    implicit object HTMLMediaElement extends MountPointBuilder[HTMLMediaElement, playbackRate.type, Double] {
      def toMountPoint(element: HTMLMediaElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.playbackRate = _)
      }
    }
  }
  object port extends PropertyFunction {
    @inline protected def attributeName = "port"
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, port.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.port = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, port.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.port = _)
      }
    }
  }
  object poster extends PropertyFunction {
    @inline protected def attributeName = "poster"
    implicit object HTMLVideoElement extends MountPointBuilder[HTMLVideoElement, poster.type, String] {
      def toMountPoint(element: HTMLVideoElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.poster = _)
      }
    }
  }
  object preload extends PropertyFunction {
    @inline protected def attributeName = "preload"
    implicit object HTMLMediaElement extends MountPointBuilder[HTMLMediaElement, preload.type, String] {
      def toMountPoint(element: HTMLMediaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.preload = _)
      }
    }
  }
  object prompt extends PropertyFunction {
    @inline protected def attributeName = "prompt"
    @deprecated("Obsolete.", "HTML 4.01") implicit object HTMLIsIndexElement extends MountPointBuilder[HTMLIsIndexElement, prompt.type, String] {
      @deprecated("Obsolete.", "HTML 4.01") def toMountPoint(element: HTMLIsIndexElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.prompt = _)
      }
    }
  }
  object protocol extends PropertyFunction {
    @inline protected def attributeName = "protocol"
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, protocol.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.protocol = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, protocol.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.protocol = _)
      }
    }
  }
  object readOnly extends PropertyFunction {
    @inline protected def attributeName = "readOnly"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, readOnly.type, Boolean] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.readOnly = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, readOnly.type, Boolean] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.readOnly = _)
      }
    }
  }
  object readyState extends PropertyFunction {
    @inline protected def attributeName = "readyState"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, readyState.type, js.Any] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.readyState = _)
      }
    }
  }
  object recordNumber extends PropertyFunction {
    @inline protected def attributeName = "recordNumber"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, recordNumber.type, js.Any] {
      def toMountPoint(element: HTMLElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.recordNumber = _)
      }
    }
  }
  object rel extends PropertyFunction {
    @inline protected def attributeName = "rel"
    implicit object HTMLLinkElement extends MountPointBuilder[HTMLLinkElement, rel.type, String] {
      def toMountPoint(element: HTMLLinkElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.rel = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, rel.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.rel = _)
      }
    }
  }
  object required extends PropertyFunction {
    @inline protected def attributeName = "required"
    implicit object HTMLSelectElement extends MountPointBuilder[HTMLSelectElement, required.type, Boolean] {
      def toMountPoint(element: HTMLSelectElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.required = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, required.type, Boolean] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.required = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, required.type, Boolean] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.required = _)
      }
    }
  }
  object rev extends PropertyFunction {
    @inline protected def attributeName = "rev"
    implicit object HTMLLinkElement extends MountPointBuilder[HTMLLinkElement, rev.type, String] {
      def toMountPoint(element: HTMLLinkElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.rev = _)
      }
    }
  }
  object rowSpan extends PropertyFunction {
    @inline protected def attributeName = "rowSpan"
    implicit object HTMLTableCellElement extends MountPointBuilder[HTMLTableCellElement, rowSpan.type, Int] {
      def toMountPoint(element: HTMLTableCellElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.rowSpan = _)
      }
    }
  }
  object rows extends PropertyFunction {
    @inline protected def attributeName = "rows"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameSetElement extends MountPointBuilder[HTMLFrameSetElement, rows.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameSetElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.rows = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, rows.type, Int] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.rows = _)
      }
    }
  }
  object sandbox extends PropertyFunction {
    @inline protected def attributeName = "sandbox"
    implicit object HTMLIFrameElement extends MountPointBuilder[HTMLIFrameElement, sandbox.type, DOMSettableTokenList] {
      def toMountPoint(element: HTMLIFrameElement, binding: Binding[DOMSettableTokenList]) = {
        Binding.BindingInstances.map(binding)(element.sandbox = _)
      }
    }
  }
  object scroll extends PropertyFunction {
    @inline protected def attributeName = "scroll"
    implicit object HTMLBodyElement extends MountPointBuilder[HTMLBodyElement, scroll.type, String] {
      def toMountPoint(element: HTMLBodyElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.scroll = _)
      }
    }
  }
  object scrollAmount extends PropertyFunction {
    @inline protected def attributeName = "scrollAmount"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, scrollAmount.type, Double] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.scrollAmount = _)
      }
    }
  }
  object scrollDelay extends PropertyFunction {
    @inline protected def attributeName = "scrollDelay"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, scrollDelay.type, Double] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.scrollDelay = _)
      }
    }
  }
  object scrollLeft extends PropertyFunction {
    @inline protected def attributeName = "scrollLeft"
    implicit object Element extends MountPointBuilder[Element, scrollLeft.type, Double] {
      def toMountPoint(element: Element, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.scrollLeft = _)
      }
    }
  }
  object scrollTop extends PropertyFunction {
    @inline protected def attributeName = "scrollTop"
    implicit object Element extends MountPointBuilder[Element, scrollTop.type, Double] {
      def toMountPoint(element: Element, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.scrollTop = _)
      }
    }
  }
  object scrolling extends PropertyFunction {
    @inline protected def attributeName = "scrolling"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, scrolling.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.scrolling = _)
      }
    }
  }
  object search extends PropertyFunction {
    @inline protected def attributeName = "search"
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, search.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.search = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, search.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.search = _)
      }
    }
  }
  object security extends PropertyFunction {
    @inline protected def attributeName = "security"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, security.type, js.Any] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.security = _)
      }
    }
    implicit object HTMLIFrameElement extends MountPointBuilder[HTMLIFrameElement, security.type, js.Any] {
      def toMountPoint(element: HTMLIFrameElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.security = _)
      }
    }
  }
  object selected extends PropertyFunction {
    @inline protected def attributeName = "selected"
    implicit object HTMLOptionElement extends MountPointBuilder[HTMLOptionElement, selected.type, Boolean] {
      def toMountPoint(element: HTMLOptionElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.selected = _)
      }
    }
  }
  object selectedIndex extends PropertyFunction {
    @inline protected def attributeName = "selectedIndex"
    implicit object HTMLSelectElement extends MountPointBuilder[HTMLSelectElement, selectedIndex.type, Int] {
      def toMountPoint(element: HTMLSelectElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.selectedIndex = _)
      }
    }
  }
  object selectionEnd extends PropertyFunction {
    @inline protected def attributeName = "selectionEnd"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, selectionEnd.type, Int] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.selectionEnd = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, selectionEnd.type, Int] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.selectionEnd = _)
      }
    }
  }
  object selectionStart extends PropertyFunction {
    @inline protected def attributeName = "selectionStart"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, selectionStart.type, Int] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.selectionStart = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, selectionStart.type, Int] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.selectionStart = _)
      }
    }
  }
  object shape extends PropertyFunction {
    @inline protected def attributeName = "shape"
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, shape.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.shape = _)
      }
    }
  }
  object size extends PropertyFunction {
    @inline protected def attributeName = "size"
    implicit object HTMLSelectElement extends MountPointBuilder[HTMLSelectElement, size.type, Int] {
      def toMountPoint(element: HTMLSelectElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.size = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, size.type, Int] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.size = _)
      }
    }
    @deprecated("Obsolete.", "DOM Level 2") implicit object HTMLBaseFontElement extends MountPointBuilder[HTMLBaseFontElement, size.type, Int] {
      @deprecated("Obsolete.", "DOM Level 2") def toMountPoint(element: HTMLBaseFontElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.size = _)
      }
    }
  }
  object span extends PropertyFunction {
    @inline protected def attributeName = "span"
    implicit object HTMLTableColElement extends MountPointBuilder[HTMLTableColElement, span.type, Int] {
      def toMountPoint(element: HTMLTableColElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.span = _)
      }
    }
  }
  object spellcheck extends PropertyFunction {
    @inline protected def attributeName = "spellcheck"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, spellcheck.type, Boolean] {
      def toMountPoint(element: HTMLElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.spellcheck = _)
      }
    }
  }
  object src extends PropertyFunction {
    @inline protected def attributeName = "src"
    implicit object HTMLImageElement extends MountPointBuilder[HTMLImageElement, src.type, String] {
      def toMountPoint(element: HTMLImageElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.src = _)
      }
    }
    implicit object HTMLSourceElement extends MountPointBuilder[HTMLSourceElement, src.type, String] {
      def toMountPoint(element: HTMLSourceElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.src = _)
      }
    }
    implicit object HTMLScriptElement extends MountPointBuilder[HTMLScriptElement, src.type, String] {
      def toMountPoint(element: HTMLScriptElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.src = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, src.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.src = _)
      }
    }
    implicit object HTMLIFrameElement extends MountPointBuilder[HTMLIFrameElement, src.type, String] {
      def toMountPoint(element: HTMLIFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.src = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, src.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.src = _)
      }
    }
    implicit object HTMLMediaElement extends MountPointBuilder[HTMLMediaElement, src.type, String] {
      def toMountPoint(element: HTMLMediaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.src = _)
      }
    }
    @deprecated("Non standard.", "forever") implicit object HTMLBGSoundElement extends MountPointBuilder[HTMLBGSoundElement, src.type, String] {
      @deprecated("Non standard.", "forever") def toMountPoint(element: HTMLBGSoundElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.src = _)
      }
    }
    implicit object HTMLEmbedElement extends MountPointBuilder[HTMLEmbedElement, src.type, String] {
      def toMountPoint(element: HTMLEmbedElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.src = _)
      }
    }
    implicit object HTMLTrackElement extends MountPointBuilder[HTMLTrackElement, src.type, String] {
      def toMountPoint(element: HTMLTrackElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.src = _)
      }
    }
  }
  object srclang extends PropertyFunction {
    @inline protected def attributeName = "srclang"
    implicit object HTMLTrackElement extends MountPointBuilder[HTMLTrackElement, srclang.type, String] {
      def toMountPoint(element: HTMLTrackElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.srclang = _)
      }
    }
  }
  object standby extends PropertyFunction {
    @inline protected def attributeName = "standby"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, standby.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.standby = _)
      }
    }
  }
  object start extends PropertyFunction {
    @inline protected def attributeName = "start"
    implicit object HTMLOListElement extends MountPointBuilder[HTMLOListElement, start.type, Int] {
      def toMountPoint(element: HTMLOListElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.start = _)
      }
    }
  }
  object status extends PropertyFunction {
    @inline protected def attributeName = "status"
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, status.type, js.Any] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.status = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, status.type, Boolean] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.status = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, status.type, js.Any] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.status = _)
      }
    }
  }
  object step extends PropertyFunction {
    @inline protected def attributeName = "step"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, step.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.step = _)
      }
    }
  }
  object tFoot extends PropertyFunction {
    @inline protected def attributeName = "tFoot"
    implicit object HTMLTableElement extends MountPointBuilder[HTMLTableElement, tFoot.type, HTMLTableSectionElement] {
      def toMountPoint(element: HTMLTableElement, binding: Binding[HTMLTableSectionElement]) = {
        Binding.BindingInstances.map(binding)(element.tFoot = _)
      }
    }
  }
  object tHead extends PropertyFunction {
    @inline protected def attributeName = "tHead"
    implicit object HTMLTableElement extends MountPointBuilder[HTMLTableElement, tHead.type, HTMLTableSectionElement] {
      def toMountPoint(element: HTMLTableElement, binding: Binding[HTMLTableSectionElement]) = {
        Binding.BindingInstances.map(binding)(element.tHead = _)
      }
    }
  }
  object tabIndex extends PropertyFunction {
    @inline protected def attributeName = "tabIndex"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, tabIndex.type, Int] {
      def toMountPoint(element: HTMLElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.tabIndex = _)
      }
    }
  }
  object target extends PropertyFunction {
    @inline protected def attributeName = "target"
    implicit object HTMLBaseElement extends MountPointBuilder[HTMLBaseElement, target.type, String] {
      def toMountPoint(element: HTMLBaseElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.target = _)
      }
    }
    implicit object HTMLLinkElement extends MountPointBuilder[HTMLLinkElement, target.type, String] {
      def toMountPoint(element: HTMLLinkElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.target = _)
      }
    }
    implicit object HTMLAreaElement extends MountPointBuilder[HTMLAreaElement, target.type, String] {
      def toMountPoint(element: HTMLAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.target = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, target.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.target = _)
      }
    }
    implicit object HTMLFormElement extends MountPointBuilder[HTMLFormElement, target.type, String] {
      def toMountPoint(element: HTMLFormElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.target = _)
      }
    }
  }
  object text extends PropertyFunction {
    @inline protected def attributeName = "text"
    implicit object HTMLOptionElement extends MountPointBuilder[HTMLOptionElement, text.type, String] {
      def toMountPoint(element: HTMLOptionElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.text = _)
      }
    }
    implicit object HTMLScriptElement extends MountPointBuilder[HTMLScriptElement, text.type, String] {
      def toMountPoint(element: HTMLScriptElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.text = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, text.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.text = _)
      }
    }
    implicit object HTMLTitleElement extends MountPointBuilder[HTMLTitleElement, text.type, String] {
      def toMountPoint(element: HTMLTitleElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.text = _)
      }
    }
  }
  object title extends PropertyFunction {
    @inline protected def attributeName = "title"
    implicit object HTMLElement extends MountPointBuilder[HTMLElement, title.type, String] {
      def toMountPoint(element: HTMLElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.title = _)
      }
    }
  }
  object trueSpeed extends PropertyFunction {
    @inline protected def attributeName = "trueSpeed"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, trueSpeed.type, Boolean] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[Boolean]) = {
        Binding.BindingInstances.map(binding)(element.trueSpeed = _)
      }
    }
  }
  object `type` extends PropertyFunction {
    @inline protected def attributeName = "type"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, `type`.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`type` = _)
      }
    }
    implicit object HTMLLinkElement extends MountPointBuilder[HTMLLinkElement, `type`.type, String] {
      def toMountPoint(element: HTMLLinkElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`type` = _)
      }
    }
    implicit object HTMLMenuElement extends MountPointBuilder[HTMLMenuElement, `type`.type, String] {
      def toMountPoint(element: HTMLMenuElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`type` = _)
      }
    }
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, `type`.type, String] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`type` = _)
      }
    }
    implicit object HTMLSourceElement extends MountPointBuilder[HTMLSourceElement, `type`.type, String] {
      def toMountPoint(element: HTMLSourceElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`type` = _)
      }
    }
    implicit object HTMLScriptElement extends MountPointBuilder[HTMLScriptElement, `type`.type, String] {
      def toMountPoint(element: HTMLScriptElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`type` = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, `type`.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`type` = _)
      }
    }
    implicit object HTMLAnchorElement extends MountPointBuilder[HTMLAnchorElement, `type`.type, String] {
      def toMountPoint(element: HTMLAnchorElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`type` = _)
      }
    }
    implicit object HTMLStyleElement extends MountPointBuilder[HTMLStyleElement, `type`.type, String] {
      def toMountPoint(element: HTMLStyleElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`type` = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, `type`.type, String] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.`type` = _)
      }
    }
  }
  object url extends PropertyFunction {
    @inline protected def attributeName = "url"
    implicit object HTMLMetaElement extends MountPointBuilder[HTMLMetaElement, url.type, String] {
      def toMountPoint(element: HTMLMetaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.url = _)
      }
    }
  }
  object useMap extends PropertyFunction {
    @inline protected def attributeName = "useMap"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, useMap.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.useMap = _)
      }
    }
    implicit object HTMLImageElement extends MountPointBuilder[HTMLImageElement, useMap.type, String] {
      def toMountPoint(element: HTMLImageElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.useMap = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, useMap.type, String] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.useMap = _)
      }
    }
  }
  object value extends PropertyFunction {
    @inline protected def attributeName = "value"
    implicit object HTMLSelectElement extends MountPointBuilder[HTMLSelectElement, value.type, String] {
      def toMountPoint(element: HTMLSelectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.value = _)
      }
    }
    implicit object HTMLOptionElement extends MountPointBuilder[HTMLOptionElement, value.type, String] {
      def toMountPoint(element: HTMLOptionElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.value = _)
      }
    }
    implicit object HTMLButtonElement extends MountPointBuilder[HTMLButtonElement, value.type, String] {
      def toMountPoint(element: HTMLButtonElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.value = _)
      }
    }
    implicit object HTMLLIElement extends MountPointBuilder[HTMLLIElement, value.type, Int] {
      def toMountPoint(element: HTMLLIElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.value = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, value.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.value = _)
      }
    }
    implicit object HTMLParamElement extends MountPointBuilder[HTMLParamElement, value.type, String] {
      def toMountPoint(element: HTMLParamElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.value = _)
      }
    }
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, value.type, String] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.value = _)
      }
    }
    implicit object HTMLProgressElement extends MountPointBuilder[HTMLProgressElement, value.type, Double] {
      def toMountPoint(element: HTMLProgressElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.value = _)
      }
    }
  }
  object valueAsNumber extends PropertyFunction {
    @inline protected def attributeName = "valueAsNumber"
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, valueAsNumber.type, Double] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.valueAsNumber = _)
      }
    }
  }
  object volume extends PropertyFunction {
    @inline protected def attributeName = "volume"
    implicit object HTMLMediaElement extends MountPointBuilder[HTMLMediaElement, volume.type, Double] {
      def toMountPoint(element: HTMLMediaElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.volume = _)
      }
    }
    @deprecated("Non standard.", "forever") implicit object HTMLBGSoundElement extends MountPointBuilder[HTMLBGSoundElement, volume.type, js.Any] {
      @deprecated("Non standard.", "forever") def toMountPoint(element: HTMLBGSoundElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.volume = _)
      }
    }
  }
  object vspace extends PropertyFunction {
    @inline protected def attributeName = "vspace"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, vspace.type, Int] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.vspace = _)
      }
    }
  }
  object width extends PropertyFunction {
    @inline protected def attributeName = "width"
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLAppletElement extends MountPointBuilder[HTMLAppletElement, width.type, Double] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLAppletElement, binding: Binding[Double]) = {
        Binding.BindingInstances.map(binding)(element.width = _)
      }
    }
    implicit object HTMLImageElement extends MountPointBuilder[HTMLImageElement, width.type, Int] {
      def toMountPoint(element: HTMLImageElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.width = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLFrameElement extends MountPointBuilder[HTMLFrameElement, width.type, js.Any] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLFrameElement, binding: Binding[js.Any]) = {
        Binding.BindingInstances.map(binding)(element.width = _)
      }
    }
    implicit object HTMLIFrameElement extends MountPointBuilder[HTMLIFrameElement, width.type, String] {
      def toMountPoint(element: HTMLIFrameElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.width = _)
      }
    }
    implicit object HTMLInputElement extends MountPointBuilder[HTMLInputElement, width.type, String] {
      def toMountPoint(element: HTMLInputElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.width = _)
      }
    }
    implicit object HTMLCanvasElement extends MountPointBuilder[HTMLCanvasElement, width.type, Int] {
      def toMountPoint(element: HTMLCanvasElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.width = _)
      }
    }
    implicit object HTMLObjectElement extends MountPointBuilder[HTMLObjectElement, width.type, String] {
      def toMountPoint(element: HTMLObjectElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.width = _)
      }
    }
    implicit object HTMLEmbedElement extends MountPointBuilder[HTMLEmbedElement, width.type, String] {
      def toMountPoint(element: HTMLEmbedElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.width = _)
      }
    }
    implicit object HTMLVideoElement extends MountPointBuilder[HTMLVideoElement, width.type, Int] {
      def toMountPoint(element: HTMLVideoElement, binding: Binding[Int]) = {
        Binding.BindingInstances.map(binding)(element.width = _)
      }
    }
    @deprecated("Obsolete.", "HTML 5") implicit object HTMLMarqueeElement extends MountPointBuilder[HTMLMarqueeElement, width.type, String] {
      @deprecated("Obsolete.", "HTML 5") def toMountPoint(element: HTMLMarqueeElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.width = _)
      }
    }
  }
  object wrap extends PropertyFunction {
    @inline protected def attributeName = "wrap"
    implicit object HTMLTextAreaElement extends MountPointBuilder[HTMLTextAreaElement, wrap.type, String] {
      def toMountPoint(element: HTMLTextAreaElement, binding: Binding[String]) = {
        Binding.BindingInstances.map(binding)(element.wrap = _)
      }
    }
  }
}
